* Garbage Collection Can Be Faster Than Stack Allocation
- Authors :: Andrew W. Appel
- Year    :: 1987
- Source  :: Information Processing Letters

A very old and simple algorithm for garbage collection gives very good results when the physical memory is much larger than the number of reachable cells. In fact, the overhead associated with allocating and collecting cells from the heap can be reduced to less than one instruction per cell by increasing the size of physical memory. Special hardware, intricate garbage-collection algorithms, and fancy compiler analysis becomes unnecessary.

** Summary
Shows how the amortised cost of freeing in a copying collector can be made arbitrarily small, if the memory is large enough. This arises from the fact that the cost is related to the proportion of live and dead objects, and far more objects tend to be dead than live.

** Relevance to Project
Provides a motivation of garbage collection from an efficiency point of view, rather than just a convenience point. Shows how garbage collection need not be a slow and unwieldy thing, unsuitable for many tasks because of perceived bottlenecks.

** References
- McCarthy 60 :: Recursive functions of symbolic expressions and their computation by machine - I
- Steele 78 :: Rabbit: a compiler for Scheme
- [[file:A%20LISP%20Garbage-Collector%20for%20Virtual-Memory%20Computer%20Systems.org][Fenichel & Yochelson 69 :: A LISP garbage-collector for virtual-memory computer systems]]
- Lieberman & Hewitt 83 :: A real-time garbage collector based on the lifetimes of objects
- Milner 84 :: A proposal for Standard ML
- Baker 78 :: List processing in real time on a serial computer
- Electronic News v. 32 86 :: Oki goes to court on Microtech pact
- Collins 60 :: A method for overlapping and erasure of lists
- Moon 84 :: Garbage collection in a large LISP system
