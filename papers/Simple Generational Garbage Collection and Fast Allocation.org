* Simple Generational Garbage Collection and Fast Allocation
- Authors :: Andrew W. Appel
- Year    :: 1988
- Source  :: Software: Practice and Experience

Generational garbage collection algorithms achieve efficiency because newer records point to older records; the only way an older record can point to a newer record is by a store operation to a previously-created record, and such operations are rare in many languages. A garbage collector that concentrates just on recently allocated records can take advantage of this fact.

Such a garbage collector can be so efficient that the allocation of records costs more than their disposal. A scheme for quick record allocation attacks this bottleneck.

Many garbage-collected environments don't know when to ask the operating system for more memory. A robust heuristic solves this problem.

This paper presents a simple, efficient, low-overhead version of generational garbage collection with fast allocation, suitable for implementation in a Unix environment.

** Summary
Proposes a simple generational garbage collection algorithm, using a simple memory layout to make allocation fast and easy, with a simple extension of including type data to support variable-length allocations. Furthermore, the virtual memory system is used to indicate when a collection is needed, by mapping a bad page after the end of available memory. Finally, when to request more information from the operating system is determined by checking how much live data there is in the heap, and requesting memory to maintain a certain (parameterised) usage.

** Relevance to Project
A very simple, yet performant, generational scheme which may be fun to verify.

** References
- McCarthy 60 :: Recursive functions of symbolic expressions and their computation by machine - I
- [[file:A%20LISP%20Garbage-Collector%20for%20Virtual-Memory%20Computer%20Systems.org][Fenichel & Yochelson 69 :: A LISP garbage-collector for virtual-memory computer systems]]
- Appel 87 :: Garbage collection can be faster than stack allocation
- Lieberman & Hewitt 83 :: A real-time garbage collector based on the lifetimes of objects
- [[file:Generation%20Scavenging:%20A%20Non-disruptive%20High%20Performance%20Storage%20Reclamation%20Algorithm.org][Ungar 84 :: Generation scavenging: a non-disruptive high performance storage reclamation algorithm]]
- Moon 84 :: Garbage collection in a large LISP system
- Appel, Ellis & Li 88 :: Real-time concurrent collection on stock multiprocessors
- Cheney 70 :: A nonrecursive list compacting algorithm
- Britton 75 :: Heap Storage Management for the Programming Language Pascal
- Appel 88 :: Runtime Tags Aren't Necessary
- Appel & MacQueen 87 :: A Standard ML Compiler
- Cormack 88 :: A micro-kernel for concurrency in C
